"""
Script de test pour v√©rifier que tout est correctement install√©
"""
import sys
import importlib


def test_python_version():
    """V√©rifie la version de Python"""
    print("üêç Test Python...")
    version = sys.version_info
    
    if version.major >= 3 and version.minor >= 10:
        print(f"   ‚úÖ Python {version.major}.{version.minor}.{version.micro}")
        return True
    else:
        print(f"   ‚ùå Python {version.major}.{version.minor}.{version.micro} (requis: 3.10+)")
        return False


def test_package(package_name, import_name=None):
    """Teste l'import d'un package"""
    if import_name is None:
        import_name = package_name
    
    try:
        importlib.import_module(import_name)
        print(f"   ‚úÖ {package_name}")
        return True
    except ImportError:
        print(f"   ‚ùå {package_name} (non install√©)")
        return False


def test_tesseract():
    """Teste Tesseract"""
    print("\nüîç Test Tesseract OCR...")
    
    try:
        import pytesseract
        from PIL import Image
        
        # Cr√©er une image de test
        test_img = Image.new('RGB', (200, 50), color='white')
        
        # Tenter une reconnaissance (devrait retourner vide mais pas d'erreur)
        try:
            pytesseract.image_to_string(test_img)
            print("   ‚úÖ Tesseract fonctionne")
            return True
        except pytesseract.TesseractNotFoundError:
            print("   ‚ùå Tesseract non trouv√©")
            print("      Installez Tesseract depuis:")
            print("      https://github.com/UB-Mannheim/tesseract/wiki")
            print("      Ou modifiez ocr_handler.py pour sp√©cifier le chemin")
            return False
    except ImportError as e:
        print(f"   ‚ùå Erreur d'import: {e}")
        return False


def test_ollama():
    """Teste la connexion √† Ollama"""
    print("\nü§ñ Test Ollama...")
    
    try:
        import requests
        
        try:
            response = requests.get("http://localhost:11434/api/tags", timeout=5)
            
            if response.status_code == 200:
                data = response.json()
                models = data.get('models', [])
                
                print("   ‚úÖ Ollama est accessible")
                
                if models:
                    print(f"   üì¶ Mod√®les disponibles:")
                    for model in models:
                        print(f"      - {model['name']}")
                    
                    # V√©rifier si gemma2:2b existe
                    if any('gemma2' in m['name'] for m in models):
                        print("   ‚úÖ gemma2:2b trouv√©")
                    else:
                        print("   ‚ö†Ô∏è gemma2:2b non trouv√©")
                        print("      Ex√©cutez: ollama pull gemma2:2b")
                else:
                    print("   ‚ö†Ô∏è Aucun mod√®le install√©")
                    print("      Ex√©cutez: ollama pull gemma2:2b")
                
                return True
            else:
                print(f"   ‚ùå Ollama a retourn√© le code {response.status_code}")
                return False
                
        except requests.exceptions.ConnectionError:
            print("   ‚ùå Impossible de se connecter √† Ollama")
            print("      Assurez-vous qu'Ollama est lanc√©:")
            print("      - Sur Windows, Ollama d√©marre automatiquement")
            print("      - Sinon, ex√©cutez: ollama serve")
            return False
            
    except ImportError:
        print("   ‚ùå Package 'requests' non install√©")
        return False


def test_keyboard_permissions():
    """Teste les permissions pour les hotkeys"""
    print("\n‚å®Ô∏è Test permissions hotkey...")
    
    try:
        import keyboard
        print("   ‚úÖ Package 'keyboard' install√©")
        print("   ‚ö†Ô∏è Note: Sur Windows, lancez l'app en administrateur pour les hotkeys globales")
        return True
    except ImportError:
        print("   ‚ùå Package 'keyboard' non install√©")
        return False


def main():
    """Ex√©cute tous les tests"""
    print("=" * 60)
    print("üß™ GAME TRANSLATOR - Test d'installation")
    print("=" * 60)
    
    results = []
    
    # Test Python
    results.append(test_python_version())
    
    # Test des packages
    print("\nüì¶ Test des packages Python...")
    results.append(test_package("PIL (Pillow)", "PIL"))
    results.append(test_package("requests"))
    results.append(test_package("keyboard"))
    results.append(test_package("mss"))
    results.append(test_package("pytesseract"))
    
    # Test Tesseract
    results.append(test_tesseract())
    
    # Test Ollama
    results.append(test_ollama())
    
    # Test permissions
    results.append(test_keyboard_permissions())
    
    # R√©sum√©
    print("\n" + "=" * 60)
    total = len(results)
    passed = sum(results)
    
    if passed == total:
        print("‚úÖ TOUS LES TESTS SONT PASS√âS!")
        print("=" * 60)
        print("\nüöÄ Vous pouvez lancer l'application:")
        print("   python main.py")
    else:
        print(f"‚ö†Ô∏è {total - passed}/{total} test(s) √©chou√©(s)")
        print("=" * 60)
        print("\nüìñ Consultez INSTALL_WINDOWS.md pour l'aide √† l'installation")
    
    print("\n")


if __name__ == '__main__':
    main()
